---
description:
globs:
alwaysApply: true
---
# Git 提交规范

## 🔄 提交信息格式

### 基本格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

### 详细说明
- **type**: 提交类型（必需）
- **scope**: 影响范围（可选）
- **subject**: 简短描述（必需）
- **body**: 详细描述（可选）
- **footer**: 关联issue或破坏性变更（可选）

## 📝 提交类型 (Type)

### 主要类型
- `feat`: 新功能
- `fix`: 修复bug
- `docs`: 文档更新
- `style`: 代码格式调整（不影响功能）
- `refactor`: 重构代码（不是新功能也不是修复bug）
- `perf`: 性能优化
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动
- `ci`: CI/CD相关变更
- `build`: 构建系统或外部依赖变更

### 特殊类型
- `hotfix`: 紧急修复
- `revert`: 回滚提交
- `merge`: 合并分支
- `init`: 初始化项目

## 🎯 影响范围 (Scope)

### 模块范围
- `auth`: 认证授权模块
- `user`: 用户管理模块
- `api`: API接口
- `db`: 数据库相关
- `config`: 配置相关
- `middleware`: 中间件
- `guard`: 守卫
- `interceptor`: 拦截器
- `filter`: 过滤器
- `dto`: 数据传输对象
- `service`: 服务层
- `controller`: 控制器
- `module`: 模块

### 技术范围
- `prisma`: Prisma相关
- `redis`: Redis相关
- `mongodb`: MongoDB相关
- `es`: Elasticsearch相关
- `kafka`: Kafka相关
- `apollo`: Apollo配置中心
- `docker`: Docker相关
- `deps`: 依赖更新

## ✅ 提交信息示例

### 功能开发
```bash
# 新增用户注册功能
git commit -m "feat(auth): add user registration with email verification"

# 新增用户管理API
git commit -m "feat(user): implement user CRUD operations"

# 新增Redis缓存
git commit -m "feat(redis): add user session caching"
```

### Bug修复
```bash
# 修复登录问题
git commit -m "fix(auth): resolve JWT token expiration issue"

# 修复数据库连接
git commit -m "fix(db): handle prisma connection timeout"

# 修复API响应格式
git commit -m "fix(api): correct response format for user endpoints"
```

### 文档更新
```bash
# 更新API文档
git commit -m "docs(api): update user endpoints documentation"

# 更新README
git commit -m "docs: update project setup instructions"
```

### 重构代码
```bash
# 重构用户服务
git commit -m "refactor(user): optimize user service performance"

# 重构数据库连接
git commit -m "refactor(db): improve prisma connection management"
```

### 测试相关
```bash
# 添加单元测试
git commit -m "test(user): add unit tests for user service"

# 修复测试用例
git commit -m "test(auth): fix authentication test cases"
```

### 配置变更
```bash
# 更新依赖
git commit -m "chore(deps): update nestjs to v11.0.0"

# 更新Docker配置
git commit -m "chore(docker): optimize dockerfile for production"

# 更新CI配置
git commit -m "ci: add automated testing workflow"
```

## 📋 详细提交示例

### 包含详细描述的提交
```bash
git commit -m "feat(auth): implement JWT refresh token mechanism

- Add refresh token generation and validation
- Implement token rotation for enhanced security
- Add refresh endpoint to auth controller
- Update auth guard to handle refresh tokens
- Add unit tests for refresh token functionality

Closes #123"
```

### 破坏性变更
```bash
git commit -m "feat(api): redesign user API response format

BREAKING CHANGE: User API now returns nested user object instead of flat structure.

Before:
{
  \"id\": \"1\",
  \"name\": \"John\",
  \"email\": \"john@example.com\"
}

After:
{
  \"user\": {
    \"id\": \"1\",
    \"profile\": {
      \"name\": \"John\",
      \"email\": \"john@example.com\"
    }
  }
}

Closes #456"
```

## 🔧 提交规范配置

### Commitlint 配置
参考 [commitlint.config.js](mdc:commitlint.config.js)：

```javascript
module.exports = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    'type-enum': [
      2,
      'always',
      [
        'feat',
        'fix',
        'docs',
        'style',
        'refactor',
        'perf',
        'test',
        'chore',
        'ci',
        'build',
        'hotfix',
        'revert',
        'merge',
        'init'
      ]
    ],
    'scope-enum': [
      2,
      'always',
      [
        'auth',
        'user',
        'api',
        'db',
        'config',
        'middleware',
        'guard',
        'interceptor',
        'filter',
        'dto',
        'service',
        'controller',
        'module',
        'prisma',
        'redis',
        'mongodb',
        'es',
        'kafka',
        'apollo',
        'docker',
        'deps'
      ]
    ],
    'subject-max-length': [2, 'always', 100],
    'subject-min-length': [2, 'always', 10],
    'subject-case': [2, 'always', 'lower-case'],
    'subject-empty': [2, 'never'],
    'subject-full-stop': [2, 'never', '.'],
    'type-case': [2, 'always', 'lower-case'],
    'type-empty': [2, 'never']
  }
};
```

### Husky Git Hooks
```json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",
      "pre-push": "npm run test"
    }
  }
}
```

### Lint-staged 配置
```json
{
  "lint-staged": {
    "*.{js,ts}": [
      "eslint --fix",
      "prettier --write",
      "git add"
    ],
    "*.{json,md}": [
      "prettier --write",
      "git add"
    ]
  }
}
```

## 🌿 分支管理规范

### 分支命名规范
```bash
# 功能分支
feature/功能描述
feature/user-authentication
feature/payment-integration

# 修复分支
fix/问题描述
fix/login-timeout-issue
fix/database-connection-error

# 热修复分支
hotfix/紧急问题描述
hotfix/security-vulnerability
hotfix/critical-bug-fix

# 发布分支
release/版本号
release/v1.0.0
release/v1.2.3

# 开发分支
develop

# 主分支
main/master
```

### 分支工作流程
```bash
# 1. 从主分支创建功能分支
git checkout main
git pull origin main
git checkout -b feature/user-management

# 2. 开发过程中定期提交
git add .
git commit -m "feat(user): add user creation endpoint"

# 3. 推送到远程分支
git push origin feature/user-management

# 4. 创建Pull Request
# 5. 代码审查通过后合并到主分支
# 6. 删除功能分支
git branch -d feature/user-management
git push origin --delete feature/user-management
```

## 📋 提交检查清单

### 提交前检查
- [ ] 提交信息符合格式规范
- [ ] 提交类型正确
- [ ] 影响范围明确
- [ ] 描述简洁明了
- [ ] 代码已通过测试
- [ ] 代码已通过lint检查

### 提交信息质量检查
- [ ] 使用英文描述
- [ ] 使用现在时态
- [ ] 首字母小写
- [ ] 不以句号结尾
- [ ] 描述具体变更内容
- [ ] 包含相关issue编号

### 特殊情况处理
- [ ] 破坏性变更已标注BREAKING CHANGE
- [ ] 回滚提交包含原因说明
- [ ] 合并提交包含分支信息
- [ ] 热修复提交标注紧急程度

## 🚨 常见错误示例

### ❌ 错误示例
```bash
# 类型错误
git commit -m "add user login"  # 缺少type

# 描述不清
git commit -m "fix: bug"  # 描述太简单

# 格式错误
git commit -m "Fix: User Login Issue"  # 首字母大写

# 范围错误
git commit -m "feat: add user login"  # 缺少scope

# 标点错误
git commit -m "feat(auth): add user login."  # 不应以句号结尾
```

### ✅ 正确示例
```bash
# 标准格式
git commit -m "feat(auth): add user login with JWT authentication"

# 包含详细描述
git commit -m "fix(db): resolve prisma connection timeout issue

- Increase connection timeout to 30 seconds
- Add connection retry mechanism
- Improve error handling for database failures

Fixes #123"
```

## 🔍 提交历史管理

### 查看提交历史
```bash
# 查看简洁的提交历史
git log --oneline

# 查看详细的提交历史
git log --graph --pretty=format:'%h - %an, %ar : %s'

# 查看特定文件的提交历史
git log --follow -- src/user/user.service.ts
```

### 修改提交信息
```bash
# 修改最后一次提交信息
git commit --amend -m "feat(auth): add user authentication with JWT"

# 交互式修改多个提交
git rebase -i HEAD~3
```

---

严格遵循这些Git提交规范，确保项目历史清晰、可追溯！
