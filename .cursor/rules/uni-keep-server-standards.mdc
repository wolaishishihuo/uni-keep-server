---
description:
globs:
alwaysApply: true
---
# Uni-Keep-Server 开发规范总览

## 📚 规范文档体系

本项目严格遵循以下开发规范体系，确保代码质量、安全性和可维护性：

### 🏗️ 核心架构规范
详见：[NestJS 架构开发标准](mdc:.cursor/rules/nestjs-architecture-standards.mdc)
- 项目目录结构规范
- 数据源管理标准
- 模块设计原则
- 服务注册规范

### 🚀 API 开发规范
详见：[API 开发标准规范](mdc:.cursor/rules/api-development-standards.mdc)
- RESTful API 设计
- 认证授权实现
- DTO 数据验证
- 错误处理标准
- 日志记录规范

### 🗄️ 数据库开发规范
详见：[数据库与 Prisma 开发标准](mdc:.cursor/rules/database-prisma-standards.mdc)
- Prisma Schema 设计
- 数据源连接管理
- 数据库操作规范
- 迁移管理标准

### 🔐 安全开发规范
详见：[安全开发最佳实践](mdc:.cursor/rules/security-best-practices.mdc)
- 认证与授权安全
- 输入验证与数据安全
- 网络安全配置
- 安全日志与监控

### 🧪 代码质量规范
详见：[代码质量与测试标准](mdc:.cursor/rules/code-quality-testing-standards.mdc)
- TypeScript 代码规范
- 测试标准规范
- 代码质量工具配置
- 开发流程检查清单

### 📝 Git 提交规范
详见：[Git 提交规范](mdc:.cursor/rules/git-commit-standards.mdc)
- 提交信息格式标准
- 提交类型和范围定义
- 分支管理规范
- 提交历史管理

## 🎯 项目特色架构

### 全局服务管理
参考 [src/global/global.service.ts](mdc:src/global/global.service.ts)：
- 统一管理所有数据源连接
- 提供全局访问接口
- 支持动态配置切换

### 多数据源支持
参考 [src/datasources](mdc:src/datasources) 目录：
- **Prisma/MySQL**: 主数据库，必需
- **Redis**: 缓存系统，推荐
- **MongoDB**: 文档数据库，可选
- **Elasticsearch**: 搜索引擎，可选
- **Kafka**: 消息队列，可选
- **Apollo**: 配置中心，可选

### 配置驱动架构
参考 [src/datasources/appollo](mdc:src/datasources/appollo)：
- 支持 Apollo 配置中心
- 环境变量后备机制
- 动态配置更新

## 🔧 开发环境配置

### 必需环境变量
```env
# 数据库连接
DATABASE_URL="mysql://root:adminroot@localhost:3306/uniKeep"

# Redis连接
REDIS_HOST="localhost"
REDIS_PORT=6380
REDIS_PASSWORD=""

# JWT安全
JWT_SECRET="your-super-secure-jwt-secret-minimum-32-characters"
JWT_EXPIRES_IN="1h"

# 服务配置
PORT=3000
NODE_ENV="development"
```

### 可选环境变量
```env
# Apollo配置中心
APOLLO_ENABLED=false
APOLLO_CONFIG_SERVER_URL="http://localhost:8080"
APOLLO_APP_ID="uni-keep-server"
APOLLO_CLUSTER="default"
APOLLO_NAMESPACE="application"

# 加密密钥
ENCRYPTION_KEY="your-encryption-key-for-sensitive-data"

# CORS配置
ALLOWED_ORIGINS="http://localhost:3000,http://localhost:5173"
```

## 📋 开发流程规范

### 1. 功能开发流程
```bash
# 1. 创建功能分支
git checkout -b feature/新功能名称

# 2. 开发前准备
# - 确认需求和设计
# - 规划数据模型
# - 设计API接口

# 3. 编码实现
# - 遵循架构规范
# - 实现业务逻辑
# - 添加错误处理

# 4. 测试验证
pnpm test          # 单元测试
pnpm test:e2e      # 集成测试
pnpm test:cov      # 覆盖率检查

# 5. 代码质量检查
pnpm lint          # 代码规范检查
pnpm lint:fix      # 自动修复
pnpm build         # 构建检查

# 6. 提交代码
git add .
git commit -m "feat: 新功能描述"
git push origin feature/新功能名称
```

### 2. 数据模型变更流程
```bash
# 1. 修改 Prisma Schema
# 编辑 prisma/schema.prisma

# 2. 生成迁移文件
pnpm prisma migrate dev --name 变更描述

# 3. 更新客户端
pnpm prisma generate

# 4. 测试迁移
pnpm prisma migrate reset  # 重置测试
pnpm prisma db seed        # 填充测试数据
```

### 3. 部署流程规范
```bash
# 1. 生产环境迁移
pnpm prisma migrate deploy

# 2. 构建应用
pnpm build

# 3. 启动应用
pnpm start:prod
```

## 🛡️ 质量门禁标准

### 代码提交要求
- [ ] 所有测试通过
- [ ] 代码覆盖率 ≥ 80%
- [ ] ESLint 检查通过
- [ ] TypeScript 编译通过
- [ ] 安全扫描通过

### 功能发布要求
- [ ] 功能测试完整
- [ ] 性能测试通过
- [ ] 安全测试通过
- [ ] 文档更新完整
- [ ] 变更日志记录

## 🚨 重要提醒

### 安全要求
- **绝不**在代码中硬编码密钥
- **必须**对所有输入进行验证
- **必须**实现适当的错误处理
- **必须**记录安全相关日志

### 性能要求
- 数据库查询必须使用索引
- 大量数据操作使用分页
- 适当使用缓存机制
- 定期监控性能指标

### 维护要求
- 保持代码简洁可读
- 编写必要的注释
- 及时更新文档
- 定期重构优化

---

**当前时间**: 2024年

严格遵循这些规范，确保 uni-keep-server 项目的高质量交付！
